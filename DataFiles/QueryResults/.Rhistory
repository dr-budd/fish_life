group_by(promoter_id) %>%
summarise(model_numbers = list(model_number))
gg_up<-ggplot(df_list_col)+
aes(x=model_numbers)+
geom_text(stat='count',
size=2,
aes(label=after_stat(count)),
vjust=-1) +
geom_bar(fill="#ED7953FF")+
labs(x=NULL, y="Shared feature count")+
theme_bw()+
scale_x_upset(n_intersections=41)+
theme_combmatrix(combmatrix.panel.point.color.fill = "#0D0887FF",
combmatrix.panel.line.color = "#0D0887FF",
combmatrix.panel.line.size = 0.5,
combmatrix.label.make_space = FALSE)
## extract model order from plot
assertive.types::assert_is_any_of(gg_up, 'ggplot')
model_order <- gg_up %>%
ggplot_build() %>%
magrittr::extract2('layout') %>%
magrittr::extract2('coord') %>%
magrittr::extract2('levels')
## order the models in df
promoter_coefs_long$model_number_f <- factor(promoter_coefs_long$model_number,
levels=c(rev(model_order)))
## make a bar graph (check order)
up_extra<-ggplot(promoter_coefs_long)+
aes(x=model_number_f)+
geom_bar(fill="#9C179EFF")+
geom_text(stat='identity',
position='identity',
check_overlap = TRUE,
size=2,
aes(label=number_of_promoters, y=number_of_promoters),
hjust=1.15)+
## flip x-y coordinates
coord_flip()+
## reverse y (now x) axis
lims(y=c(max(promoter_coefs_long$number_of_promoters)+50, 0))+
labs(x=NULL, y="Feature count")+
theme_bw()+
theme(text = element_text(size=7))
feats_1<-ggarrange(up_extra+
theme(plot.margin = unit(x=c(403,10,5.5,5.5), ## T, R, B, L
units = "pt"),
axis.ticks.y = element_blank(),
axis.text.y = element_blank()),
gg_up+
theme(plot.margin = unit(x=c(5.5,5.5,25,5.5), ## T, R, B, L
units = "pt")),
widths=c(0.2, 0.8))
feats_2 <- ggplot(promoter_coefs_long,
aes(promoter_id, model_number_f, fill=abs_coef)) +
geom_tile()+
labs(x="Feature", y=NULL)+
scale_fill_viridis_c(option="C",
trans = "log",
name = "Absolute\ncoefficient\nvalue\n")+
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "right",
legend.title=element_text(size=8.5),
legend.key.size = unit(0.45, 'cm'),
legend.text = element_text(size=7))
ggarrange(feats_1,
feats_2+
theme(plot.margin = unit(x=c(20,5.5,5.5,5.5), ## T, R, B, L
units = "pt")),
ncol=1,
heights = c(0.75, 0.25),
labels=c("A", "B"))
ggsave("FiguresTables/Figure S[ocv_features].png",
width = 8.25,
height = 10.25,
units = "in")
paste("Number of promoters range:",
round(min(nested_elastic_parameters$num_pred_proms), digits=2),
"-",
round(max(nested_elastic_parameters$num_pred_proms), digits=2))
## import summary metadata
nested_elastic_metadata_summary_unmod <- read.csv("DataFiles/08.00_nested_elastic_metadata_summary.csv")
## format it
nested_elastic_metadata_summary <- nested_elastic_metadata_summary_unmod %>%
mutate(log_absolute_error = abs(log_lifespan - log_predicted_lifespan)) %>%
mutate(log_relative_error = (log_absolute_error/log_lifespan)*100) %>%
mutate(detrans_absolute_error = abs(mean_lifespan - detrans_predicted_lifespan)) %>%
mutate(detrans_relative_error = (detrans_absolute_error/mean_lifespan)*100) %>%
mutate(model_number = paste0("Model 0", partition_number)) %>%
mutate(model_number = gsub("010", "10", model_number)) %>%
mutate(data_set_labs = ifelse(data_set == "training",
"Training data",
"Testing data")) %>%
mutate(data_set_labs = factor(data_set_labs,
levels=c("Training data", "Testing data")))
## export it
write.csv(nested_elastic_metadata_summary,
"DataFiles/09.00_nested_elastic_metadata_summary.csv",
row.names=FALSE)
scorr <- ggscatter(data = nested_elastic_metadata_summary,
x = "log_lifespan",
y = "log_predicted_lifespan",
add = "reg.line",
xlab = "Known lifespan (ln)",
ylab = "Predicted lifespan (ln)",
shape = 21,
size = 1,
fill="grey",
facet.by = c("model_number", "data_set_labs"),
ggtheme = theme_bw(),
legend = "bottom")+
stat_cor(aes(label = paste(..r.label..,
..rr.label..,
..p.label..,
sep = "~`,`~")),
size=2.5,
label.y=3.5,
label.sep='\n')
scorr
ggsave("FiguresTables/Figure S[ocv_corrs].png",
scorr,
width = 8.25,
height = 10,
units = "in")
## print ranges for correlation coefficients (R):
paste0("#### R ####")
paste0("Minimum R: ", round(min(c(nested_elastic_correlations$estimate_train,
nested_elastic_correlations$estimate_test)), digits=2))
paste0("Training data range: R = ",
round(min(nested_elastic_correlations$estimate_train), digits=2),
" - ",
round(max(nested_elastic_correlations$estimate_train), digits=2))
paste0("Testing data range: R = ",
round(min(nested_elastic_correlations$estimate_test), digits=2),
" - ",
round(max(nested_elastic_correlations$estimate_test), digits=2))
## print ranges for coefficient of determination (R^2):
paste0("#### R^2 ####")
paste0("Minimum R^2: ", round(min(c(nested_elastic_correlations$estimate_train^2,
nested_elastic_correlations$estimate_test^2)), digits=2))
paste0("Training data range: R = ",
round(min(nested_elastic_correlations$estimate_train)^2, digits=2),
" - ",
round(max(nested_elastic_correlations$estimate_train)^2, digits=2))
paste0("Testing data range: R = ",
round(min(nested_elastic_correlations$estimate_test)^2, digits=2),
" - ",
round(max(nested_elastic_correlations$estimate_test)^2, digits=2))
## import and formate data, then calculate CG density
temp_data <- read.table(file = data_files[file_num]) %>%
## add column names (from blast query call)
## NB: this is necessary but nice if you want to eyeball the data
rename(query_seqid = V1, subject_seqid = V2, subject_seq_len = V3,
query_start = V4, query_end = V5, ## start and end of alignment in query
subject_start = V6, subject_end = V7, ## start and end of alignment in subject
perc_ident = V8, num_ident = V9, ## percent and number of identical matches
subject_seq = V10) %>% ## aligned part of subject sequence
## remove sequence gap indicators from alignment ("-")
mutate(subject_seq = gsub("-", "", subject_seq),
## remove sequence gap indicators from alignment ("-")
length = nchar(subject_seq),
## count the number of "CG" occurrences
cg_count = str_count(subject_seq, "CG"),
## count the number of Cs
c_count = str_count(subject_seq, "C"),
## count the number of Gs
g_count = str_count(subject_seq, "G"),
## calculate the CpG density
cg_dens = cg_count/length,
## calculate the CpG O/E
cg_oe = cg_count/((c_count*g_count)/length)) %>%
## rename the promoter ID column
rename(., promoter_id = query_seqid)
## SET UP ----
## set working directly to query results directory
setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/DataFiles/QueryResults"))
## open file to write output
sink("../../LogFiles/06_calculate_cpg_content_log.txt")
## load libraries
library(stringr)
library(ape)
library(tidyverse)
## create a list of blast hit files to import into R
data_files_all <- list.files(pattern = "top_hits")
## remove any files of size zero from file list
data_files_empty <- NULL
for (i in data_files_all) {
if (file.size(i) == 0)
data_files_empty <- c(data_files_empty, i)
}
data_files <- NULL
for (i in data_files_all) {
if (!file.size(i) == 0)
data_files <- c(data_files, i)
}
## create vector of assembly names
assembly_names <- gsub("_genomic_top_hits", "", data_files)
## CALCULATE CpG DENSITY ----
## for first file in dir ----
## specify the file number
file_num <- 1
## save the assembly name to a variable (the name of the file minus the extension)
temp_assembly <- paste(gsub("_genomic_top_hits", "", data_files[file_num]))
## print the file number and assembly name
print(paste("file number:", file_num, "of", length(data_files)))
## import and formate data, then calculate CG density
temp_data <- read.table(file = data_files[file_num]) %>%
## add column names (from blast query call)
## NB: this is necessary but nice if you want to eyeball the data
rename(query_seqid = V1, subject_seqid = V2, subject_seq_len = V3,
query_start = V4, query_end = V5, ## start and end of alignment in query
subject_start = V6, subject_end = V7, ## start and end of alignment in subject
perc_ident = V8, num_ident = V9, ## percent and number of identical matches
subject_seq = V10) %>% ## aligned part of subject sequence
## remove sequence gap indicators from alignment ("-")
mutate(subject_seq = gsub("-", "", subject_seq),
## remove sequence gap indicators from alignment ("-")
length = nchar(subject_seq),
## count the number of "CG" occurrences
cg_count = str_count(subject_seq, "CG"),
## count the number of Cs
c_count = str_count(subject_seq, "C"),
## count the number of Gs
g_count = str_count(subject_seq, "G"),
## calculate the CpG density
cg_dens = cg_count/length,
## calculate the CpG O/E
cg_oe = cg_count/((c_count*g_count)/length)) %>%
## rename the promoter ID column
rename(., promoter_id = query_seqid)
## remove duplicate hits (retain only 'top' hit)
temp_data <- temp_data[!duplicated(temp_data[,1]), ]
## edit and rename the OE data frame
temp_oe_data <- temp_data %>%
## retain only the promoter id and CpG densities
select(promoter_id, cg_oe) %>%
## rename the cg_oe column with the assembly name
rename(., "{temp_assembly}" := cg_oe) %>%
## reorder by promoter id
arrange(., promoter_id)
## edit and rename the density data frame
temp_dens_data <- temp_data %>%
## retain only the promoter id and CpG densities
select(promoter_id, cg_dens) %>%
## rename the cg_oe column with the assembly name
rename(., "{temp_assembly}" := cg_dens) %>%
## reorder by promoter id
arrange(., promoter_id)
## edit and rename the length data frame
temp_len_data <- temp_data %>%
## retain only the promoter id and hit lengths
select(promoter_id, length) %>%
## rename the cg_oe column with the assembly name
rename(., "{temp_assembly}" := length) %>%
## reorder by promoter id (optional here)
arrange(., promoter_id)
## edit and rename the percent id data frame
temp_pi_data <- temp_data %>%
## retain only the promoter id and percent idents
select(promoter_id, perc_ident) %>%
## rename the cg_oe column with the assembly name
rename(., "{temp_assembly}" := perc_ident) %>%
## reorder by promoter id (optional here)
arrange(., promoter_id)
## for remaining files in dir ----
## loop through each file
for(file_num in 2:length(data_files)){
## save the assembly name to a variable (the name of the file minus the extension)
temp_assembly <- paste(gsub("_genomic_top_hits", "", data_files[file_num]))
## print the file number and assembly name
print(paste("file number:", file_num, "of", length(data_files)))
## import and format data, then calculate CG density
temp_data <- read.table(file = data_files[file_num]) %>%
## add column names (from blast query call)
## NB: this is not necessary but nice if you want to eyeball the data
rename(query_seqid = V1, subject_seqid = V2, subject_seq_len = V3,
query_start = V4, query_end = V5, ## start and end of alignment in query
subject_start = V6, subject_end = V7, ## start and end of alignment in subject
perc_ident = V8, num_ident = V9, ## percent and number of identical matches
subject_seq = V10) %>% ## aligned part of subject sequence
## remove sequence gap indicators from alignment ("-")
mutate(subject_seq = gsub("-", "", subject_seq),
## remove sequence gap indicators from alignment ("-")
length = nchar(subject_seq),
## count the number of "CG" occurrences
cg_count = str_count(subject_seq, "CG"),
## count the number of Cs
c_count = str_count(subject_seq, "C"),
## count the number of Gs
g_count = str_count(subject_seq, "G"),
## calculate the CpG density
cg_dens = cg_count/length,
## calculate the CpG O/E
cg_oe = cg_count/((c_count*g_count)/length)) %>%
## rename the promoter ID column
rename(., promoter_id = query_seqid)
## remove duplicate hits (retain only 'top' hit)
temp_data <- temp_data[!duplicated(temp_data[,1]), ]
## edit and rename the OE data frame
temp_oe_data <- temp_data %>%
## retain only the promoter id and CpG densities
select(promoter_id, cg_oe) %>%
## rename the cg_oe column with the assembly name
rename(., "{temp_assembly}" := cg_oe) %>%
## reorder by promoter id
arrange(., promoter_id) %>%
## join temp data to existing data (and overwrite it)
full_join(temp_oe_data, ., by = "promoter_id")
## edit and rename the density data frame
temp_dens_data <- temp_data %>%
## retain only the promoter id and CpG densities
select(promoter_id, cg_dens) %>%
## rename the cg_oe column with the assembly name
rename(., "{temp_assembly}" := cg_dens) %>%
## reorder by promoter id
arrange(., promoter_id) %>%
## join temp data to existing data (and overwrite it)
full_join(temp_dens_data, ., by = "promoter_id")
## join the data frames (hit length)
temp_len_data <- temp_data %>%
## retain only the promoter id and hit lengths
select(promoter_id, length) %>%
## rename the cg_oe column with the assembly name
rename(., "{temp_assembly}" := length) %>%
## reorder by promoter id (optional here)
arrange(., promoter_id) %>%
## join temp data to existing data (and overwrite it)
full_join(temp_len_data, ., by = "promoter_id")
## edit and rename the percent id data frame
temp_pi_data <- temp_data %>%
## retain only the promoter id and percent idents
select(promoter_id, perc_ident) %>%
## rename the cg_oe column with the assembly name
rename(., "{temp_assembly}" := perc_ident) %>%
## reorder by promoter id (optional here)
arrange(., promoter_id) %>%
## join
full_join(temp_pi_data, ., by="promoter_id")
}
## format cpg oe data
cpg_oe_data_full <- temp_oe_data %>%
## order the dataframe by promoter id
arrange(., promoter_id) %>%
## transpose CpG oe data for elastic net
## this is round about but prevents num to chr
pivot_longer(-promoter_id) %>%
pivot_wider(names_from = promoter_id, values_from = value) %>%
## move the assembly names to rownames
column_to_rownames(., "name") %>%
## convert to matrix
as.matrix(.)
## export cpg oe file (all fish)
write.csv(cpg_oe_data_full, "../06.00_cpg_oe_data_full.csv", row.names = TRUE)
## format cpg density data
cpg_dens_data_full <- temp_dens_data %>%
## order the dataframe by promoter id
arrange(., promoter_id) %>%
## transpose CpG density data for elastic net
## this is round about but prevents num to chr
pivot_longer(-promoter_id) %>%
pivot_wider(names_from = promoter_id, values_from = value) %>%
## move the assembly names to rownames
column_to_rownames(., "name") %>%
## convert to matrix
as.matrix(.)
## export cpg density file (all fish)
write.csv(cpg_dens_data_full, "../06.00_cpg_dens_data_full.csv", row.names = TRUE)
## format hit length data
hit_len_data_full <- temp_len_data %>%
## order the dataframe by promoter id
arrange(., promoter_id) %>%
## transpose CpG density data for elastic net
## this is round about but prevents num to chr
pivot_longer(-promoter_id) %>%
pivot_wider(names_from = promoter_id, values_from = value) %>%
## move the assembly names to rownames
column_to_rownames(., "name") %>%
## convert to matrix
as.matrix(.)
## export hit length file (all fish)
write.csv(hit_len_data_full, "../06.00_hit_len_data_full.csv", row.names = TRUE)
## format percent identity data
hit_pi_data_full <- temp_pi_data %>%
## order the dataframe by promoter id
arrange(., promoter_id) %>%
## transpose CpG density data for elastic net
## this is round about but prevents num to chr
pivot_longer(-promoter_id) %>%
pivot_wider(names_from = promoter_id, values_from = value) %>%
## move the assembly names to rownames
column_to_rownames(., "name") %>%
## convert to matrix
as.matrix(.)
## export cpg density file (all fish)
write.csv(hit_pi_data_full, "../06.00_hit_pi_data_full.csv", row.names = TRUE)
## CREATE METADATA ----
## calculate blast hit info ----
## calculate mean hit length per species assembly
nz_hit_len_all_fish <- temp_len_data %>%
## order the data frame by promoter id
arrange(., promoter_id) %>%
## format to long and get summary data
pivot_longer(-promoter_id, names_to = "assembly_id") %>%
group_by(assembly_id) %>%
summarise(mean_nz_hit_len = mean(value, na.rm = TRUE))
## calculate mean percent identity per species assembly
nz_pi_all_fish <- temp_pi_data %>%
## order the dataframe by promoter id
arrange(., promoter_id) %>%
## format to long and get summary data
pivot_longer(-promoter_id, names_to = "assembly_id") %>%
group_by(assembly_id) %>%
summarise(mean_nz_perc_ident = mean(value, na.rm = TRUE))
## calculate mean hit length per species assembly
hit_len_all_fish <- temp_len_data %>%
## replace NAs with zeros
replace(is.na(.), 0) %>%
## order the dataframe by promoter id
arrange(., promoter_id) %>%
## format to long and get summary data
pivot_longer(-promoter_id, names_to = "assembly_id") %>%
group_by(assembly_id) %>%
summarise(mean_hit_len = mean(value, na.rm = TRUE))
## calculate mean hit length per species assembly
pi_all_fish <- temp_pi_data %>%
## replace NAs with zeros
replace(is.na(.), 0) %>%
## order the dataframe by promoter id
arrange(., promoter_id) %>%
## format to long and get summary data
pivot_longer(-promoter_id, names_to = "assembly_id") %>%
group_by(assembly_id) %>%
summarise(mean_perc_ident = mean(value, na.rm = TRUE))
## calculate number of hits per species assembly
hit_num_all_fish <- as.data.frame(cpg_oe_data_full) %>%
mutate(num_hits = rowSums(!is.na(.))) %>%
select(num_hits) %>%
rownames_to_column(., var = "assembly_id")
## import metadata and add blast hit info to metadata
metadata_sum <- read.csv("../00.10_metadata_sum.csv") %>%
## add non-zero hit length
left_join(., nz_hit_len_all_fish, by = "assembly_id") %>%
## add hit length
left_join(., hit_len_all_fish, by = "assembly_id") %>%
## add num hits
left_join(., hit_num_all_fish, by = "assembly_id") %>%
## add perc id
left_join(., pi_all_fish, by = "assembly_id") %>%
## add non-zero perc id
left_join(., nz_pi_all_fish, by = "assembly_id")
## SUBSET METADATA ----
## remove species assemblies in metadata but not cg oe data
no_cgoe_fish <- setdiff(metadata_sum$assembly_id, rownames(cpg_oe_data_full))
paste0("removing assembly with no cpg oe data from the metadata: ", no_cgoe_fish)
metadata_sum <- metadata_sum %>%
filter(., !assembly_id %in% no_cgoe_fish)
## remove species assemblies in the cg oe and dens data but not the metadata
no_meta_fish <- setdiff(rownames(cpg_oe_data_full), metadata_sum$assembly_id)
paste0("removing assembly with no lifespan info from the cpg oe and cg dens data: ", no_meta_fish)
cpg_oe_data <- cpg_oe_data_full[!rownames(cpg_oe_data_full) %in% no_meta_fish, ]
cpg_dens_data <- cpg_dens_data_full[!rownames(cpg_dens_data_full) %in% no_meta_fish, ]
## add mean hit info to metadata
metadata_sum <- metadata_sum %>%
## add mean cpg oe
left_join(., (as.data.frame(cpg_oe_data) %>%
## replace NAs with zeros
replace(is.na(.), 0)) %>%
mutate(mean_cpg_oe = rowMeans(.)) %>%
select(mean_cpg_oe) %>%
rownames_to_column(., var = "assembly_id"),
by = "assembly_id") %>%
## add mean non-zero cpg oe
left_join(., (as.data.frame(cpg_oe_data)) %>%
mutate(mean_nz_cpg_oe = rowMeans(., na.rm=TRUE)) %>%
select(mean_nz_cpg_oe) %>%
rownames_to_column(., var = "assembly_id"),
by = "assembly_id") %>%
## add mean cpg dens
left_join(., (as.data.frame(cpg_dens_data) %>%
## replace NAs with zeros
replace(is.na(.), 0)) %>%
mutate(mean_cpg_dens = rowMeans(.)) %>%
select(mean_cpg_dens) %>%
rownames_to_column(., var = "assembly_id"),
by = "assembly_id") %>%
## add mean non-zero cpg dens
left_join(., (as.data.frame(cpg_dens_data)) %>%
mutate(mean_nz_cpg_dens = rowMeans(., na.rm=TRUE)) %>%
select(mean_nz_cpg_dens) %>%
rownames_to_column(., var = "assembly_id"),
by = "assembly_id")
## quick check
ifelse(all(rownames(cpg_oe_data) == metadata_sum$assembly_id) == "TRUE",
"assembly ids are identical - you are good to go",
paste0("STOP!!! something is wrong - your assembly ids are not identical in your cpg oe and your metadata (and they need to be)"))
## create cpg oe data set with species names
rownames(cpg_oe_data) <- metadata_sum$organism_name
## create cpg dens data set with species names
rownames(cpg_dens_data) <- metadata_sum$organism_name
## EXPORT FILES ----
## export cpg oe file
write.csv(cpg_oe_data, "../06.00_cpg_oe_data.csv", row.names = TRUE)
## export cpg density file
write.csv(cpg_dens_data, "../06.00_cpg_dens_data.csv", row.names = TRUE)
## export metadata
write.csv(metadata_sum, "../06.00_metadata_sum.csv", row.names = FALSE)
## print session info
sessionInfo()
## write output to open file
sink()
## END SCRIPT
##
