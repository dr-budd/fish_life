scale_x_discrete("Non-zero promoters") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90,hjust = 1, vjust=0, size = 5),
axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10))
current_directory <- dirname(rstudioapi::getActiveDocumentContext()$path)
knitr::opts_knit$set(root.dir=normalizePath(paste0(current_directory)))
## LOAD LIBRARIES ----
library(caret) ## used to split data evenly
library(glmnet) ## contains the elastic net regression model
library(glmnetUtils) ## alpha cross validation
library(viridis) ## colour blind friendly
library(ggpubr) ## scatter plot and correlation
library(ggrepel)
library(plotmo)
library(tidyverse) ## helpful for data handling and visualization
## IMPORT AND FORMAT DATA ----
## MODEL PARAMETERS ----
## import model parameters
nested_elastic_parameters <- read.csv("../DataFiles/10.00_nested_elastic_parameters.csv")
## format
nested_elastic_parameters_long <- nested_elastic_parameters %>%
pivot_longer(., alpha_min:num_pred_proms)
## UNTRANSFORMED DATA ---
## import
nested_elastic_correlations <- read.csv("../DataFiles/10.00_nested_elastic_correlations.csv") %>%
mutate(estimate_sqrd_test = estimate_test^2,
estimate_sqrd_train = estimate_train^2)
## format
nested_elastic_correlations_long <- nested_elastic_correlations %>%
select(-c(null.value_train, null.value_test,
alternative_train, alternative_test,
method_train, method_test,
data.name_train, data.name_test,
parameter_train, parameter_test,
conf_0_train, conf_1_train,
conf_0_test, conf_1_test)) %>%
pivot_longer(., statistic_train:estimate_sqrd_train) %>%
mutate(data_set = ifelse(grepl("test", name),
"testing",
ifelse(grepl("train", name),
"training",
"-"))) %>%
mutate(data_set = factor(data_set, levels=c("training", "testing", "-"))) %>%
mutate(test = gsub("_test", "", name) %>%
gsub("_train", "", .)) %>%
mutate(colour = ifelse(name == "p.value_test" & value < 0.05 |
name == "p.value_train" & value < 0.05,
"good  ",
ifelse(name == "p.value_test" & value > 0.05 |
name == "p.value_train" & value > 0.05,
"bad  ",
ifelse(name == "sig_diff_cor" & value > 0.05 |
name == "sig_diff_resid" & value > 0.05,
"good  ",
ifelse(name == "sig_diff_cor" & value < 0.05 |
name == "sig_diff_resid" & value < 0.05,
"bad  ",
ifelse(name == "estimate_test" & value < 0.3 |
name == "estimate_train" & value < 0.3,
"bad  ",
ifelse(name == "estimate_test" & value > 0.6 |
name == "estimate_train" & value > 0.6,
"good  ",
ifelse(name == "estimate_test" & value < 0.6 |
name == "estimate_train" & value < 0.6,
"ok  ",
"-"))))))))
## TRANSFORMED DATA ---
## import
nested_elastic_correlations_log <- read.csv("../DataFiles/10.00_nested_elastic_correlations_log.csv") %>%
mutate(estimate_sqrd_test_log = estimate_test_log^2,
estimate_sqrd_train_log = estimate_train_log^2)
## format
nested_elastic_correlations_log_long <- nested_elastic_correlations_log %>%
select(-c(null.value_train_log, null.value_test_log,
alternative_train_log, alternative_test_log,
method_train_log, method_test_log,
data.name_train_log, data.name_test_log,
parameter_train_log, parameter_test_log,
conf_0_train_log, conf_1_train_log,
conf_0_test_log, conf_1_test_log)) %>%
pivot_longer(., statistic_train_log:estimate_sqrd_train_log) %>%
mutate(data_set = ifelse(grepl("test", name),
"testing",
ifelse(grepl("train", name),
"training",
"-"))) %>%
mutate(data_set = factor(data_set, levels=c("training", "testing", "-"))) %>%
mutate(test = gsub("_test_log", "", name) %>%
gsub("_train_log", "", .)) %>%
mutate(colour = ifelse(name == "p.value_test_log" & value < 0.05 |
name == "p.value_train_log" & value < 0.05,
"good  ",
ifelse(name == "p.value_test_log" & value > 0.05 |
name == "p.value_train_log" & value > 0.05,
"bad  ",
ifelse(name == "sig_diff_cor_log" & value > 0.05 |
name == "sig_diff_resid_log" & value > 0.05,
"good  ",
ifelse(name == "sig_diff_cor_log" & value < 0.05 |
name == "sig_diff_resid_log" & value < 0.05,
"bad  ",
ifelse(name == "estimate_test_log" & value < 0.3 |
name == "estimate_train_log" & value < 0.3,
"bad  ",
ifelse(name == "estimate_test_log" & value > 0.6 |
name == "estimate_train_log" & value > 0.6,
"good  ",
ifelse(name == "estimate_test_log" & value < 0.6 |
name == "estimate_train_log" & value < 0.6,
"ok  ",
"-"))))))))
# ```{r fig.width = 4.05, fig.height = 4.05}
## PLOT MODEL PARAMETERS ----
## facet labels
nice_labels <- c(alpha_min = "Minimum alpha",
lambda_min = "Minimum lambda",
lambda_1se = "Lambda 1se",
mse_min = "Minimum mean squared error\n(MSE)",
num_pred_proms = "Number of predictive promoters")
## plot
ggplot(nested_elastic_parameters_long,
aes(x = partition_number, y = value, label = round(value, digits=2))) +
geom_line(size = 0.25)+
geom_point()+
geom_text_repel(size = 3, angle = 30)+
facet_wrap("name", scales = "free", ncol = 1, labeller = as_labeller(nice_labels))+
scale_x_continuous(breaks = seq(0, 10, by = 1))+
ggtitle("Nested CV results: elastic net model parameters")+
theme_bw()
# ```{r fig.width = 4.05, fig.height = 4.05}
## (**) THE HILL : what do you actually want to see here... (might need to do some reading, sorry.)
## PLOT CORRELATION STATISTICS ----
## (predicted lifespan ~ known lifespan)
## UNTRANSFORMED VALUES ----
## vars NOT to plot
vars_to_remove <- c("statistic_test", "statistic_train",
"sig_diff_cor", "sig_diff_resid",
"num_pred_proms")
## facet labels
nice_labels <- c(estimate = "Pearson correlation coeffcient\n(R)",
estimate_sqrd = "Coefficient of determination\n(R^2)",
mse = "Mean squared error\n(MSE)",
mae = "Mean absolute error\n(MAE)",
p.value = "Correlation significance\n(p-value)",
training = "Training",
testing = "Testing")
## plot
ggplot(nested_elastic_correlations_long %>% filter(., !name %in% vars_to_remove),
aes(x = partition_number, y = value, group = name, colour = colour)) +
geom_line(colour = "black", size = 0.25)+
geom_point()+
facet_grid(rows = vars(test),
cols = vars(data_set),
scales = "free_y",
labeller = as_labeller(nice_labels))+
scale_colour_manual(values=c("good  " = "#22A884FF",
"bad  " = "#de7065ff",
"ok  " = "#f9b641ff",
"-" = "black"))+
scale_x_continuous(breaks = c(1:10))+
theme(legend.position = "bottom")+
ggtitle("Nested CV results: predicted ~ known lifespan correlations")+
theme_bw()
# ```{r fig.width = 4.05, fig.height = 1}
## test vs train ----
## vars to plot
vars_test_vs_train <- c("sig_diff_cor", "sig_diff_resid")
### facet labels
nice_labels <- c(sig_diff_cor = "Correlation coefficient comparison p-value: testing vs training", ## better label? (**)
sig_diff_resid = "T-test of residuals p-value: testing vs training") ## better label? (**)
## plot
ggplot(nested_elastic_correlations_long %>% filter(., name %in% vars_test_vs_train),
aes(x = partition_number, y = value, group = name, colour = colour)) +
geom_line(size = 0.25, colour = "black")+
geom_point(size = 2)+
facet_wrap("name",
# scales = "free",
ncol = 2, labeller = as_labeller(nice_labels))+
scale_colour_manual(values=c("good  " = "#22A884FF",
"bad  " = "#de7065ff",
"ok  " = "#f9b641ff",
"-" = "black"))+
scale_x_continuous(breaks = c(1:10))+
theme(legend.position = "bottom")+
ggtitle("Nested CV results: predicted ~ known lifespan correlations test vs train")+
theme_bw()
# ```{r fig.width = 4.05, fig.height = 4.05}
## TRANSFORMED VALUES ----
## vars NOT to plot
vars_to_remove <- c("statistic_test_log", "statistic_train_log",
"sig_diff_cor_log", "sig_diff_resid_log",
"num_pred_proms_log") ## **??
## facet labels
nice_labels <- c(estimate = "Pearson correlation coeffcient\n(R)",
estimate_sqrd = "Coefficient of determination\n(R^2)",
mse = "Mean squared error\n(MSE)",
mae = "Mean absolute error\n(MAE)",
p.value = "Correlation significance\n(p-value)",
training = "Training",
testing = "Testing")
## plot
ggplot(nested_elastic_correlations_log_long %>% filter(., !name %in% vars_to_remove),
aes(x = partition_number, y = value, group = name, colour = colour)) +
geom_line(colour = "black", size = 0.25)+
geom_point()+
facet_grid(rows = vars(test),
cols = vars(data_set),
scales = "free_y",
labeller = as_labeller(nice_labels))+
scale_colour_manual(values=c("good  " = "#22A884FF",
"bad  " = "#de7065ff",
"ok  " = "#f9b641ff",
"-" = "black"))+
scale_x_continuous(breaks = c(1:10))+
theme(legend.position = "bottom")+
ggtitle("Nested CV results: ln(predicted) ~ ln(known lifespan) correlations")+
theme_bw()
## ```{r fig.width = 4.05, fig.height = 1}
## test vs train ----
## vars to plot
vars_test_vs_train <- c("sig_diff_cor_log", "sig_diff_resid_log")
### facet labels
nice_labels <- c(sig_diff_cor_log =
"Correlation coefficient comparison p-value: testing vs training", ## better label? (**)
sig_diff_resid_log =
"T-test of residuals p-value: testing vs training") ## better label? (**)
## plot
ggplot(nested_elastic_correlations_log_long %>% filter(., name %in% vars_test_vs_train),
aes(x = partition_number, y = value, group = name, colour = colour)) +
geom_line(size = 0.25, colour = "black")+
geom_point(size = 2)+
facet_wrap("name",
# scales = "free",
ncol = 2, labeller = as_labeller(nice_labels))+
scale_colour_manual(values=c("good  " = "#22A884FF",
"bad  " = "#de7065ff",
"ok  " = "#f9b641ff",
"-" = "black"))+
scale_x_continuous(breaks = c(1:10))+
theme(legend.position = "bottom")+
ggtitle("Nested CV results: ln(predicted) ~ ln(known lifespan) correlations test vs train")+
theme_bw()
## import coefficient information from nested cv
promoter_coefficients <- read.csv("../DataFiles/10.00_nested_promoter_coefficients.csv")
# ## make it long
# promoter_coefs_long <- promoter_coefficents %>%
#   pivot_longer(., -promoter_id, names_to = "partition_number", values_to = "coef")
## create matrix for pheatmap
promoter_coef_matrix <- as.matrix(column_to_rownames(promoter_coefficients,
var = "promoter_id"))
## make zeros NA (for heatmap)
promoter_coef_matrix[promoter_coef_matrix == 0] <- NA
## make a range
range <- max(abs(promoter_coef_matrix), na.rm = TRUE)
pheatmap::pheatmap(promoter_coef_matrix,
main = "Nested CV results:\npromoter coefficient values",
border_color = NA,
color = inferno(10),
cluster_cols = FALSE,
cluster_rows = FALSE,
droplevels = TRUE,
show_rownames = FALSE,
na_col = "white",
breaks = seq(-range, range, length.out = 10))
# legend_breaks=c(10^(0:ceiling(log10(max(promoter_coef_matrix)))),
#                      round(max(promoter_coef_matrix), 2)))
## id the partition value (model) with the highest cor and
## NSD between cors (or resid diffs)
## untransformed values
partition <- nested_elastic_correlations %>%
filter(sig_diff_cor > 0.05 & sig_diff_resid > 0.05) %>%
filter(estimate_test == max(estimate_test))
part_num <- partition$partition_number
paste0("'optimal' partition number(s) from untransformed data: ", part_num)
## transformed values
partition_log <- nested_elastic_correlations_log %>%
# filter(sig_diff_cor_log > 0.05 & sig_diff_resid_log > 0.05) %>%
filter(estimate_test_log == max(estimate_test_log))
part_num_log <- partition_log$partition_number
paste0("'optimal' partition number(s) from transformed data: ", part_num_log)
## which is the 'least complicated' model
part_nums <- c(part_num, part_num_log)
# least_complicated <- (nested_elastic_parameters %>%
#   filter(alpha_min == max((nested_elastic_parameters %>%
#                              filter(partition_number %in% part_nums))$alpha_min)))$partition_number
least_complicated <- (nested_elastic_parameters %>%
filter(num_pred_proms == min((nested_elastic_parameters %>%
filter(partition_number %in% part_nums))$num_pred_proms)))$partition_number
paste0("partition number ", least_complicated, " is the least complicated of the best models")
## overwrite this
least_complicated = 1
## import summary metadata
nested_elastic_metadata_summary <- read.csv("../DataFiles/10.00_nested_elastic_metadata_summary.csv")
## filter by selected partition
sum_metadata <- nested_elastic_metadata_summary %>%
filter(., partition_number == least_complicated)
## label outliers
## create function
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
sum_metadata$outlier <- ifelse(is_outlier(sum_metadata$mean_max_ls),
## if yes, paste the fish name
sum_metadata$organism_name,
## if no, paste nothing
as.numeric(NA))
ls_plot <- ggplot(sum_metadata, aes(data_set, mean_max_ls))+
geom_boxplot()+
geom_jitter(aes(colour=organism_name),
pch = 21,
position=position_jitter(seed=1))+
scale_colour_viridis_d(option = "C", guide="none")+
geom_text_repel(aes(label=outlier, colour=organism_name),
max.overlaps = 30,
position=position_jitter(seed=1),
na.rm=TRUE, hjust=-0.1, vjust = 0.3, size = 3)+
theme_bw()
## import CpG density data
cpg_density_data <- read.csv("../DataFiles/06.00_cpg_density_ls_fish.csv") %>%
column_to_rownames(., var="X") %>%
## replace NAs with zeros (**)
replace(is.na(.), 0) %>%
## format as matrix
as.matrix(.)
## add mean cpg density to metadata
sum_metadata_more <- as.data.frame(cpg_density_data) %>%
mutate(mean_cpg_dens = rowMeans(.)) %>%
select(mean_cpg_dens) %>%
rownames_to_column(., var = "assembly_id") %>%
left_join(sum_metadata, ., by = "assembly_id")
sum_metadata_more$outlier_cpg_dens <- ifelse(is_outlier(sum_metadata_more$mean_cpg_dens),
## if yes, paste the fish name
sum_metadata_more$organism_name,
## if no, paste nothing
as.numeric(NA))
dens_plot <- ggplot(sum_metadata_more, aes(data_set, mean_cpg_dens))+
geom_boxplot()+
geom_jitter(aes(colour=organism_name),
pch = 21,
position=position_jitter(seed=1))+
scale_colour_viridis_d(option = "C", guide="none")+
geom_text_repel(aes(label=outlier_cpg_dens, colour=organism_name),
max.overlaps = 30,
position=position_jitter(seed=1),
na.rm=TRUE, hjust=-0.1, vjust = 0.3, size = 3)+
theme_bw()
ggarrange(ls_plot, dens_plot, ncol = 2)
## CALCULATE ABSOLUTE AND RELATIVE ERROR ----
## create function
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
sum_metadata <- sum_metadata %>%
## exp
mutate(absolute_error = abs(mean_max_ls - predicted_lifespan)) %>%
mutate(relative_error = absolute_error/mean_max_ls*100) %>%
mutate(ae_labs = ifelse(is_outlier(absolute_error),
gsub(" ", "\n", organism_name), NA)) %>%
mutate(re_labs = ifelse(is_outlier(relative_error),
gsub(" ", "\n", organism_name), NA)) %>%
## log
mutate(absolute_error_log = abs(log_lifespan - log_predicted_lifespan)) %>%
mutate(relative_error_log = absolute_error_log/log_lifespan*100) %>%
mutate(ae_labs_log = ifelse(is_outlier(absolute_error_log),
gsub(" ", "\n", organism_name), NA)) %>%
mutate(re_labs_log = ifelse(is_outlier(relative_error_log),
gsub(" ", "\n", organism_name), NA)) %>%
mutate(all_data = "all data") %>%
mutate(data_type = gsub("testing", "Testing samples", data_set) %>%
gsub("training", "Training samples", .)) %>%
mutate(data_type = factor(data_type, levels = c("Training samples", "Testing samples")))
## nice plots for simon (similar to bens)
training_corr <- ggscatter(data = sum_metadata %>% filter(data_type == "Training samples"),
x = "mean_max_ls", y = "predicted_lifespan", add = "reg.line",
xlab = "Known lifespan", ylab = "Predicted lifespan",
shape = 21, ggtheme = theme_bw(), title = "Training data",
fill = "relative_error", legend = "bottom", legend.title = "Relative error (%)") +
stat_cor(aes(label = paste(..r.label.., ..rr.label.., ..p.label.., sep = "~`,`~")),
label.x = min(sum_metadata$mean_max_ls),
label.y = max(sum_metadata$predicted_lifespan)+10)+
gradient_fill(plasma(50))
testing_corr <- ggscatter(data = sum_metadata %>% filter(data_type == "Testing samples"),
x = "mean_max_ls", y = "predicted_lifespan", add = "reg.line",
xlab = "Known lifespan", ylab = "Predicted lifespan",
shape = 21, ggtheme = theme_bw(), title = "Testing data",
fill = "relative_error", legend = "bottom", legend.title = "Relative error (%)") +
stat_cor(aes(label = paste(..r.label.., ..rr.label.., ..p.label.., sep = "~`,`~")),
label.x = min(sum_metadata$mean_max_ls),
label.y = max(sum_metadata$predicted_lifespan)+10)+
gradient_fill(plasma(50))
ggarrange(training_corr, testing_corr, nrow = 1, ncol = 2, widths = c(1,1))
ggsave("fish_lifespan_correlation.tiff", width = 8.25, height = 3.91, units = "in")
ggsave("fish_lifespan_correlation_testing.tiff", testing_corr, width = 4.125, height = 3.91, units = "in")
## nice plots for simon (similar to bens)
training_corr <- ggscatter(data = sum_metadata %>% filter(data_type == "Training samples"),
x = "log_lifespan", y = "log_predicted_lifespan", add = "reg.line",
xlab = "Known lifespan (ln)", ylab = "Predicted lifespan (ln)",
shape = 21, ggtheme = theme_bw(), title = "Training data",
fill = "relative_error_log", legend = "bottom", legend.title = "Relative error (%)") +
stat_cor(aes(label = paste(..r.label.., ..rr.label.., ..p.label.., sep = "~`,`~")),
label.x = min(sum_metadata$log_lifespan),
label.y = max(sum_metadata$log_predicted_lifespan))+
gradient_fill(plasma(50))
# training_corr
testing_corr <- ggscatter(data = sum_metadata %>% filter(data_type == "Testing samples"),
x = "log_lifespan", y = "log_predicted_lifespan", add = "reg.line",
xlab = "Known lifespan (ln)", ylab = "Predicted lifespan (ln)",
shape = 21, ggtheme = theme_bw(), title = "Testing data",
fill = "relative_error_log", legend = "bottom", legend.title = "Relative error (%)") +
stat_cor(aes(label = paste(..r.label.., ..rr.label.., ..p.label.., sep = "~`,`~")),
label.x = min(sum_metadata$log_lifespan),
label.y = max(sum_metadata$log_predicted_lifespan))+
gradient_fill(plasma(50))
# testing_corr
ggarrange(training_corr, testing_corr, nrow = 1, ncol = 2, widths = c(1,1))
ggsave("fish_lifespan_correlation_ln.tiff", width = 8.25, height = 3.91, units = "in")
## PLOT ABSOLUTE AND RELATIVE ERROR ----
## exp
ae1<-ggplot(sum_metadata, aes(data_type, absolute_error, fill = data_type, colour = data_type))+
geom_boxplot(colour = "black")+
scale_fill_viridis_d(option = "C", alpha = 0.5)+
scale_colour_viridis_d(option = "C")+
ylab("Absolute error (years)")+
xlab(NULL)+
scale_y_continuous(breaks = scales::pretty_breaks())+
# scale_y_continuous(breaks = scales::pretty_breaks(),
#                    limits=c(boxplot(absolute_error ~ data_type,
#                                     sum_metadata, plot=FALSE)$stats[1,1],
#                             boxplot(absolute_error ~ data_type,
#                                     sum_metadata, plot=FALSE)$stats[5,1]))+
geom_jitter(width = 0.1)+
theme_bw()
re1<-ggplot(sum_metadata, aes(data_type, relative_error, fill = data_type, colour = data_type))+
geom_boxplot(colour = "black")+
scale_fill_viridis_d(option = "C", alpha = 0.5)+
scale_colour_viridis_d(option = "C")+
ylab("Relative error (%)")+
xlab(NULL)+
scale_y_continuous(breaks = scales::pretty_breaks())+
# scale_y_continuous(breaks = scales::pretty_breaks(),
#                    limits=c(boxplot(relative_error ~ data_type,
#                                     data = sum_metadata, plot=FALSE)$stats[1,1],
#                             boxplot(relative_error ~ data_type,
#                                     data = sum_metadata, plot=FALSE)$stats[5,1]))+
geom_jitter(width = 0.1)+
theme_bw()
ggarrange(ae1, re1, nrow = 1, ncol = 2, common.legend=TRUE, legend = "none")
ggsave("fish_lifespan_error.tiff", width = 8.25, height = 3.91, units = "in")
## log
ae1<-ggplot(sum_metadata, aes(data_type, absolute_error_log, fill = data_type, colour = data_type))+
geom_boxplot(colour = "black")+
scale_fill_viridis_d(option = "C", alpha = 0.5)+
scale_colour_viridis_d(option = "C")+
ylab("Absolute error (years)")+
xlab(NULL)+
scale_y_continuous(breaks = scales::pretty_breaks())+
# scale_y_continuous(breaks = scales::pretty_breaks(),
#                    limits=c(boxplot(absolute_error ~ data_type,
#                                     sum_metadata, plot=FALSE)$stats[1,1],
#                             boxplot(absolute_error ~ data_type,
#                                     sum_metadata, plot=FALSE)$stats[5,1]))+
geom_jitter(width = 0.1)+
theme_bw()+
ggtitle("ln")
re1<-ggplot(sum_metadata, aes(data_type, relative_error_log, fill = data_type, colour = data_type))+
geom_boxplot(colour = "black")+
scale_fill_viridis_d(option = "C", alpha = 0.5)+
scale_colour_viridis_d(option = "C")+
ylab("Relative error (%)")+
xlab(NULL)+
scale_y_continuous(breaks = scales::pretty_breaks())+
# scale_y_continuous(breaks = scales::pretty_breaks(),
#                    limits=c(boxplot(relative_error ~ data_type,
#                                     data = sum_metadata, plot=FALSE)$stats[1,1],
#                             boxplot(relative_error ~ data_type,
#                                     data = sum_metadata, plot=FALSE)$stats[5,1]))+
geom_jitter(width = 0.1)+
theme_bw()+
ggtitle("ln")
ggarrange(ae1, re1, nrow = 1, ncol = 2, common.legend=TRUE, legend = "none")
ggsave("fish_lifespan_error_ln.tiff", width = 8.25, height = 3.91, units = "in")
## EXTRACT THE PREDICTIVE PROMOTERS AND THEIR COEFFICIENTS----
## extract the coefficients for the specified value of lambda
## select the non-zero coefficients
predictive_promoters <- promoter_coefficients %>%
select(promoter_id, paste0("partition_", least_complicated)) %>%
rename(coef = paste0("partition_", least_complicated)) %>%
filter(coef != 0) %>%
# filter(promoter_id != "(Intercept)") %>%
mutate(abs_coef = abs(coef))
## export them
write.csv(predictive_promoters,
"../DataFiles/10.00_predictive_promoters.csv",
row.names = FALSE)
## while we're at it, export data set info
species_partition <- sum_metadata %>%
select(organism_name, assembly_id, data_set)
write.csv(species_partition, "../DataFiles/10.0_species_partition.csv")
ggplot(data=predictive_promoters %>%
arrange(coef) %>%
mutate(promoter_id = fct_inorder(factor(promoter_id)))) +
geom_bar(aes(promoter_id, y = coef, fill = coef),
stat = "identity", position = "dodge") +
scale_fill_viridis(option = "C")+
scale_y_continuous("Coefficient estimates") +
scale_x_discrete("Non-zero promoters") +
theme_bw()+
theme(axis.text.x = element_text(angle = 90,hjust = 1, vjust=0, size = 5),
axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10))
